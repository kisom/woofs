{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Woofs","tagline":"web one-time offer file securely","body":"Web Onetime Offer File Securely\r\n-------------------------------\r\nauthor: [Kyle Isom](http://www.kyleisom.net)\r\n\r\n### quick overview\r\n\r\npython program behaving the same as the woof script written by \r\n[Simon Budig](http://www.home.unix-ag.org/simon/) but providing SSL encryption.\r\n\r\nlicense: dual ISC / public domain license. see `LICENSE`.\r\n\r\n\r\n- - -\r\n\r\nwhat does it do?\r\nwoofs allows you to quickly offer a file for download on your machine. it offers\r\nthe ability to select the port and number of times the file can be downloaded\r\nbefore the HTTPS server shuts down (which defaults to 1).\r\n\r\ndependencies:\r\n* argparse\r\n\r\n- - -\r\n\r\n### how do i use it?\r\nthe simplest way is to use something like this:\r\n```bash\r\n./woofs.py --port 443 --downloads 2 file.tar.bz\r\n```\r\nthis looks for a configuration file at `${HOME}/.config/woofs/config` which should\r\nlook something like:\r\n```bash\r\ncat ~/.config/woofs/config\r\nkey: /etc/ssl/private/server.key\r\ncert: /etc/ssl/server.crt\r\n```\r\n\r\nyou can also specify a configuration file using the `--config` option, or a key\r\nand certificate using `--key` and `--cert` to point to the files.\r\n\r\nby default, woofs uses the internal LAN address (i.e. 192.168.1.2). you can\r\nhave it use your external IP address using `--external`.\r\n\r\nyou can also use gzip compression by using the `--gzip` (or `-z`).\r\n\r\nthe most likely cause of problems will be incorrect permissions - see the\r\nsection on permissions below.\r\n\r\n\r\n### how do i generate ssl keys?\r\n\r\n```bash\r\nopenssl genrsa -out ~/.woofs/server.key 2048\r\nopenssl req -new -key ~/.woofs/server.key -out ~/.woofs/server.csr\r\n```\r\nat this point you have two options -\r\n\r\n1. submit the certificate signature request to a trusted CA, who will give\r\nyou a signed certificate in exchange for money, or\r\n2. self-sign your certificate. there are a number of security issues here\r\nbut the easiest way around them is to have the end-user verify the SSL\r\nfingerprint.\r\n\r\nif you choose to self-sign, at this point you would need to issue the following:\r\n```bash\r\nopenssl x509 -req -days 365 -in ~/.woofs/server.csr \\\r\n  -signkey ~/.woofs/server.key -out ~/.woofs/server.crt\r\n```\r\n\r\n### a note on file permissions\r\n\r\nit is critical that `~/.woofs` (or whatever folder you put the key in) must have\r\nsecure permissions: i recommend the files inside have a mode of `0600`, and the\r\ndirectory have the permissions of `0700`.\r\n\r\nFiles need to have secure permissions; the private files (`config` and the\r\nprivate key) should be `0400` or `0600`, while public files should be `644`.\r\n\r\n"}